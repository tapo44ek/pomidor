import React, { useState, useEffect, useRef  } from 'react';
import {
  useReactTable,
  getCoreRowModel,
  getSortedRowModel,
  getFilteredRowModel,
  flexRender,
} from '@tanstack/react-table';
import { useVirtualizer  } from '@tanstack/react-virtual';

const Try = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);

  const columns = React.useMemo(
    () => [
      {
        header: 'Name',
        accessorKey: 'name',
        enableSorting: true,
        size: 200, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞
      },
      {
        header: 'Age',
        accessorKey: 'age',
        enableSorting: true,
        size: 100, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞
      },
      {
        header: 'Address',
        accessorKey: 'address',
        size: 300, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞
      },
    ],
    []
  );

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true); // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
      try {
        // –ó–¥–µ—Å—å –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
        const fetchedData = await new Promise((resolve) =>
          setTimeout(() => resolve([
            { name: 'John Doe', age: 28, address: '123 Main St' },
            { name: 'Jane Doe', age: 32, address: '456 Elm St' },
            { name: 'Sam Smith', age: 25, address: '789 Oak St' },
            { name: 'Alice Johnson', age: 30, address: '321 Pine St' },
            { name: 'Bob Lee', age: 22, address: '567 Birch St' },
            { name: 'Charlie Brown', age: 35, address: '234 Cedar St' },
            { name: 'David White', age: 40, address: '890 Maple St' },
            { name: 'Eve Adams', age: 27, address: '678 Oak Ave' },
          ]), 200) // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
        );
        setData(fetchedData);
      } catch (error) {
        console.error('Error fetching data:', error);
      } finally {
        setLoading(false); // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
      }
    };

    fetchData();
  }, []);

  return (
    <div className="App">
      <h1 className="text-2xl font-bold text-center my-4">User Table</h1>
      <Table columns={columns} data={data} loading={loading} />
    </div>
  );
};

const Table = ({ columns, data, loading }) => {
  const [globalFilter, setGlobalFilter] = useState('');
  const [sorting, setSorting] = useState([]);

  const table = useReactTable({
    data,
    columns,
    state: {
      globalFilter,
      sorting,
    },
    onGlobalFilterChange: setGlobalFilter,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
  });

  const tableContainerRef = useRef(null);

  // –í–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
  const rowVirtualizer = useVirtualizer({
    count: table.getRowModel().rows.length,
    estimateSize: () => 48, // –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    getScrollElement: () => tableContainerRef.current,
    overscan: 10, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  });

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
  const columnWidth = `${100 / columns.length}%`;

  return (
    <div className="p-4">
      <input
        type="text"
        value={globalFilter}
        onChange={(e) => setGlobalFilter(e.target.value)}
        placeholder="Search..."
        className="mb-4 p-2 border rounded"
      />
      
      {loading ? (
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-[#01c5ad] border-solid"></div>
        </div>
      ) : (
        <div
          ref={tableContainerRef}
          className="min-w-full bg-white border overflow-auto"
          style={{ height: '600px' }} // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        >
          <table className="w-full table-fixed"> {/* –î–æ–±–∞–≤–ª–µ–Ω table-fixed */}
            <thead className="sticky top-0 bg-white z-10">
              {table.getHeaderGroups().map((headerGroup) => (
                <tr key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <th
                      key={header.id}
                      onClick={header.column.getToggleSortingHandler()}
                      className="px-6 py-3 border-b-2 border-gray-300 text-left text-sm font-semibold text-gray-600 uppercase tracking-wider cursor-pointer hover:bg-gray-50"
                      style={{ width: columnWidth }} // –û–¥–∏–Ω–∞–∫–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                    >
                      {flexRender(
                        header.column.columnDef.header,
                        header.getContext()
                      )}
                      <span className="ml-2">
                        {header.column.getIsSorted() === 'asc' ? 'üîº' : header.column.getIsSorted() === 'desc' ? 'üîΩ' : null}
                      </span>
                    </th>
                  ))}
                </tr>
              ))}
            </thead>
            <tbody
              style={{
                height: `${rowVirtualizer.getTotalSize()}px`,
                position: 'relative',
              }}
            >
              {rowVirtualizer.getVirtualItems().map((virtualRow) => {
                const row = table.getRowModel().rows[virtualRow.index];
                return (
                  <tr
                    key={row.id}
                    style={{
                      position: 'absolute',
                      top: 0,
                      left: 0,
                      width: '100%',
                      height: `${virtualRow.size}px`,
                      transform: `translateY(${virtualRow.start}px)`,
                    }}
                    className="hover:bg-gray-100"
                  >
                    {row.getVisibleCells().map((cell) => (
                      <td
                        key={cell.id}
                        className="px-6 py-4 border-b border-gray-200 text-sm text-gray-700 truncate w-full" // –î–æ–±–∞–≤–ª–µ–Ω truncate
                         // –û–¥–∏–Ω–∞–∫–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
                      >
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </td>
                    ))}
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};


export default Try;
